#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para atualizar o banco de dados com as novas funcionalidades do NeuroLearn
Equipe Control + Amizade - CodeRace 2025
"""

import sqlite3
import os
from datetime import datetime

def criar_backup():
    """Cria backup do banco atual"""
    if os.path.exists('sistema_educacional.db'):
        backup_name = f'sistema_educacional_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
        os.system(f'copy sistema_educacional.db {backup_name}')
        print(f"‚úÖ Backup criado: {backup_name}")
        return True
    return False

def atualizar_banco():
    """Adiciona as novas tabelas ao banco de dados"""
    conn = sqlite3.connect('sistema_educacional.db')
    cursor = conn.cursor()
    
    try:
        print("üîÑ Iniciando atualiza√ß√£o do banco de dados...")
        
        # 1. Teste de Perfil Cognitivo
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS teste_perfili_cognitivo (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                aluno_id INTEGER NOT NULL,
                tipo_teste VARCHAR(50) NOT NULL,
                pontuacao INTEGER NOT NULL,
                tempo_resposta INTEGER,
                data_teste DATETIME DEFAULT CURRENT_TIMESTAMP,
                resultados_detalhados TEXT,
                FOREIGN KEY (aluno_id) REFERENCES aluno(id)
            )
        ''')
        print("‚úÖ Tabela teste_perfili_cognitivo criada")
        
        # 2. Trilhas de Aprendizado
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS trilha_aprendizado (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome VARCHAR(200) NOT NULL,
                descricao TEXT,
                tipo_conteudo VARCHAR(50) NOT NULL,
                nivel_dificuldade VARCHAR(20) NOT NULL,
                area_conhecimento VARCHAR(100) NOT NULL,
                perfil_alvo VARCHAR(100),
                duracao_estimada INTEGER,
                url_conteudo VARCHAR(500),
                arquivo_conteudo VARCHAR(200),
                ativo BOOLEAN DEFAULT 1,
                data_criacao DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        print("‚úÖ Tabela trilha_aprendizado criada")
        
        # 3. Progresso nas Trilhas
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS progresso_trilha (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                aluno_id INTEGER NOT NULL,
                trilha_id INTEGER NOT NULL,
                progresso REAL DEFAULT 0.0,
                tempo_gasto INTEGER DEFAULT 0,
                data_inicio DATETIME DEFAULT CURRENT_TIMESTAMP,
                data_conclusao DATETIME,
                feedback_aluno TEXT,
                dificuldade_percebida INTEGER,
                FOREIGN KEY (aluno_id) REFERENCES aluno(id),
                FOREIGN KEY (trilha_id) REFERENCES trilha_aprendizado(id)
            )
        ''')
        print("‚úÖ Tabela progresso_trilha criada")
        
        # 4. Cronograma de Estudos
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cronograma_estudo (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                aluno_id INTEGER NOT NULL,
                data_inicio DATE NOT NULL,
                data_fim DATE NOT NULL,
                objetivo VARCHAR(200) NOT NULL,
                horas_por_dia REAL NOT NULL,
                dias_semana VARCHAR(20) NOT NULL,
                horario_preferido VARCHAR(20),
                tempo_pausa INTEGER DEFAULT 10,
                tempo_sessao INTEGER DEFAULT 25,
                lembretes_ativos BOOLEAN DEFAULT 1,
                ativo BOOLEAN DEFAULT 1,
                FOREIGN KEY (aluno_id) REFERENCES aluno(id)
            )
        ''')
        print("‚úÖ Tabela cronograma_estudo criada")
        
        # 5. Sess√µes de Estudo
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessao_estudo (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                cronograma_id INTEGER NOT NULL,
                data_sessao DATETIME NOT NULL,
                duracao_planejada INTEGER NOT NULL,
                duracao_real INTEGER,
                realizada BOOLEAN DEFAULT 0,
                feedback TEXT,
                nivel_concentracao INTEGER,
                trilha_estudada INTEGER,
                FOREIGN KEY (cronograma_id) REFERENCES cronograma_estudo(id),
                FOREIGN KEY (trilha_estudada) REFERENCES trilha_aprendizado(id)
            )
        ''')
        print("‚úÖ Tabela sessao_estudo criada")
        
        # 6. Biblioteca de Conte√∫do
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS biblioteca_conteudo (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                titulo VARCHAR(200) NOT NULL,
                descricao TEXT,
                tipo VARCHAR(50) NOT NULL,
                categoria VARCHAR(100) NOT NULL,
                nivel_ensino VARCHAR(20),
                url_conteudo VARCHAR(500),
                arquivo_conteudo VARCHAR(200),
                tem_legenda BOOLEAN DEFAULT 0,
                tem_libras BOOLEAN DEFAULT 0,
                tem_transcricao VARCHAR(500),
                duracao INTEGER,
                classificacao_etaria VARCHAR(10),
                tags VARCHAR(500),
                ativo BOOLEAN DEFAULT 1,
                data_criacao DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        print("‚úÖ Tabela biblioteca_conteudo criada")
        
        # 7. Monitoramento de Comportamento
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS monitoramento_comportamento (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                aluno_id INTEGER NOT NULL,
                data_acao DATETIME DEFAULT CURRENT_TIMESTAMP,
                tipo_acao VARCHAR(50) NOT NULL,
                contexto VARCHAR(100),
                tempo_gasto INTEGER,
                dispositivo VARCHAR(50),
                resultado VARCHAR(20),
                detalhes TEXT,
                FOREIGN KEY (aluno_id) REFERENCES aluno(id)
            )
        ''')
        print("‚úÖ Tabela monitoramento_comportamento criada")
        
        # 8. Configura√ß√µes de Acessibilidade
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS configuracao_acessibilidade (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario_id INTEGER NOT NULL UNIQUE,
                modo_escuro BOOLEAN DEFAULT 0,
                alto_contraste BOOLEAN DEFAULT 0,
                tamanho_fonte VARCHAR(20) DEFAULT 'normal',
                audio_leitura BOOLEAN DEFAULT 0,
                velocidade_audio REAL DEFAULT 1.0,
                navegacao_simplificada BOOLEAN DEFAULT 0,
                reducao_animacoes BOOLEAN DEFAULT 0,
                notificacoes_visuais BOOLEAN DEFAULT 1,
                notificacoes_sonoras BOOLEAN DEFAULT 1,
                cores_personalizadas VARCHAR(500),
                FOREIGN KEY (usuario_id) REFERENCES usuario(id)
            )
        ''')
        print("‚úÖ Tabela configuracao_acessibilidade criada")
        
        # 9. Intera√ß√µes com Assistente Virtual
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS interacao_assistente (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario_id INTEGER NOT NULL,
                mensagem_usuario TEXT NOT NULL,
                resposta_assistente TEXT NOT NULL,
                contexto VARCHAR(100),
                satisfacao_resposta INTEGER,
                data_interacao DATETIME DEFAULT CURRENT_TIMESTAMP,
                resolveu_duvida BOOLEAN,
                FOREIGN KEY (usuario_id) REFERENCES usuario(id)
            )
        ''')
        print("‚úÖ Tabela interacao_assistente criada")
        
        # Inserir dados de exemplo
        inserir_dados_exemplo(cursor)
        
        conn.commit()
        print("\nüéâ Banco de dados atualizado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar banco: {e}")
        conn.rollback()
    finally:
        conn.close()

def inserir_dados_exemplo(cursor):
    """Insere alguns dados de exemplo para testar as novas funcionalidades"""
    print("\nüì¶ Inserindo dados de exemplo...")
    
    # Trilhas de exemplo
    trilhas_exemplo = [
        ('Matem√°tica B√°sica - Visual', 'Trilha de matem√°tica com foco em elementos visuais', 'video', 'facil', 'matematica', 'Visual', 60, '', '', 1),
        ('Portugu√™s - Auditivo', 'Trilha de portugu√™s com √°udios e podcasts', 'audio', 'medio', 'portugues', 'Auditivo', 45, '', '', 1),
        ('Ci√™ncias - Pr√°tico', 'Experimentos pr√°ticos de ci√™ncias', 'jogo', 'medio', 'ciencias', 'Sinest√©sico', 90, '', '', 1),
        ('L√≥gica e Programa√ß√£o', 'Introdu√ß√£o √† programa√ß√£o e l√≥gica', 'texto', 'dificil', 'tecnologia', 'L√≥gico', 120, '', '', 1)
    ]
    
    for trilha in trilhas_exemplo:
        cursor.execute('''
            INSERT OR IGNORE INTO trilha_aprendizado 
            (nome, descricao, tipo_conteudo, nivel_dificuldade, area_conhecimento, perfil_alvo, duracao_estimada, url_conteudo, arquivo_conteudo, ativo) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', trilha)
    
    # Conte√∫do da biblioteca
    conteudos_exemplo = [
        ('Podcast de Hist√≥ria do Brasil', 'Epis√≥dios sobre a hist√≥ria brasileira', 'podcast', 'historia', 'fundamental2', '', '', 1, 0, '', 30, 'livre', 'historia,brasil,educativo', 1),
        ('V√≠deo: Matem√°tica para Todos', 'V√≠deo explicativo sobre matem√°tica b√°sica', 'video', 'matematica', 'fundamental1', '', '', 1, 1, '', 15, 'livre', 'matematica,basico,inclusivo', 1),
        ('Jogo: Palavras Cruzadas', 'Jogo educativo de portugu√™s', 'jogo', 'portugues', 'fundamental2', '', '', 0, 0, '', 0, 'livre', 'portugues,jogo,palavras', 1),
        ('V√≠deo: Ci√™ncias da Natureza', 'Document√°rio sobre meio ambiente', 'video', 'ciencias', 'medio', '', '', 1, 1, '', 45, 'livre', 'ciencias,natureza,meio-ambiente', 1)
    ]
    
    for conteudo in conteudos_exemplo:
        cursor.execute('''
            INSERT OR IGNORE INTO biblioteca_conteudo 
            (titulo, descricao, tipo, categoria, nivel_ensino, url_conteudo, arquivo_conteudo, tem_legenda, tem_libras, tem_transcricao, duracao, classificacao_etaria, tags, ativo) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', conteudo)
    
    print("‚úÖ Dados de exemplo inseridos")

def verificar_tabelas():
    """Verifica se todas as tabelas foram criadas corretamente"""
    conn = sqlite3.connect('sistema_educacional.db')
    cursor = conn.cursor()
    
    tabelas_esperadas = [
        'teste_perfili_cognitivo',
        'trilha_aprendizado',
        'progresso_trilha',
        'cronograma_estudo',
        'sessao_estudo',
        'biblioteca_conteudo',
        'monitoramento_comportamento',
        'configuracao_acessibilidade',
        'interacao_assistente'
    ]
    
    print("\nüîç Verificando tabelas criadas:")
    
    for tabela in tabelas_esperadas:
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (tabela,))
        resultado = cursor.fetchone()
        
        if resultado:
            # Contar registros
            cursor.execute(f"SELECT COUNT(*) FROM {tabela}")
            count = cursor.fetchone()[0]
            print(f"  ‚úÖ {tabela} - {count} registros")
        else:
            print(f"  ‚ùå {tabela} - N√ÉO ENCONTRADA")
    
    conn.close()

def main():
    print("üöÄ NeuroLearn - Atualiza√ß√£o do Banco de Dados")
    print("üè¢ Equipe Control + Amizade - CodeRace 2025")
    print("="*50)
    
    # Criar backup
    if criar_backup():
        print("üìÅ Backup do banco atual criado com sucesso")
    
    # Atualizar banco
    atualizar_banco()
    
    # Verificar resultado
    verificar_tabelas()
    
    print("\n" + "="*50)
    print("üéØ Atualiza√ß√£o conclu√≠da!")
    print("\nüìã Novas funcionalidades dispon√≠veis:")
    print("   1. ‚úÖ Teste de perfil cognitivo")
    print("   2. ‚úÖ Trilhas personalizadas de aprendizado")
    print("   3. ‚úÖ Cronograma de estudos adaptado")
    print("   4. ‚úÖ Painel de progresso")
    print("   5. ‚úÖ Assistente virtual")
    print("   6. ‚úÖ Interface acess√≠vel")
    print("   7. ‚úÖ Biblioteca com podcasts e v√≠deos")
    print("   8. ‚úÖ Monitoramento de comportamento")
    
    print("\nüéâ Sistema NeuroLearn atualizado com sucesso!")

if __name__ == '__main__':
    main()

