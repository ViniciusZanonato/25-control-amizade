#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para debugar o problema do question√°rio NeuroLearn
Testa todo o fluxo desde o login at√© o acesso ao dashboard
"""

from app import app, db, Usuario, Aluno, QuestionarioNeuroLearn, PerfilAprendizagem, gerar_perfil_aprendizagem
from werkzeug.security import generate_password_hash
import json

def resetar_aluno_teste():
    """Reset do aluno de teste para recriar o problema"""
    with app.app_context():
        # Buscar ou criar usu√°rio de teste
        usuario = Usuario.query.filter_by(email='debug@aluno.com').first()
        if usuario:
            # Deletar perfil existente
            aluno = Aluno.query.filter_by(usuario_id=usuario.id).first()
            if aluno:
                # Limpar dados relacionados
                QuestionarioNeuroLearn.query.filter_by(aluno_id=aluno.id).delete()
                PerfilAprendizagem.query.filter_by(aluno_id=aluno.id).delete()
                
                # Resetar flags
                aluno.questionario_completo = False
                aluno.perfil_gerado = False
                db.session.commit()
                print(f"‚úÖ Aluno resetado - ID: {aluno.id}")
                return aluno
        
        # Criar novo usu√°rio se n√£o existe
        usuario = Usuario(
            nome='Debug Aluno',
            email='debug@aluno.com',
            senha_hash=generate_password_hash('123456'),
            tipo='aluno'
        )
        db.session.add(usuario)
        db.session.commit()
        
        aluno = Aluno(
            usuario_id=usuario.id,
            email_escola='debug@escola.com',
            serie_ano='9¬∫ ano',
            professor_responsavel='Prof. Debug',
            idade=15
        )
        db.session.add(aluno)
        db.session.commit()
        print(f"‚úÖ Novo aluno criado - ID: {aluno.id}")
        return aluno

def simular_questionario_completo(aluno_id):
    """Simula o preenchimento completo do question√°rio"""
    with app.app_context():
        aluno = Aluno.query.get(aluno_id)
        print(f"üîç Estado inicial - Question√°rio: {aluno.questionario_completo}, Perfil: {aluno.perfil_gerado}")
        
        # Simular respostas variadas (n√£o s√≥ 3)
        respostas_simuladas = {
            # Bloco 1 - Percep√ß√£o Sensorial (quest√µes 1-10)
            1: [4, 2, 3, 5, 4, 2, 3, 1, 4, 3],
            # Bloco 2 - Aten√ß√£o e Foco (quest√µes 11-20) 
            2: [3, 4, 2, 3, 2, 4, 3, 5, 2, 4],
            # Bloco 3 - Comunica√ß√£o (quest√µes 21-30)
            3: [2, 3, 4, 3, 2, 4, 3, 2, 4, 3],
            # Bloco 4 - Organiza√ß√£o (quest√µes 31-40)
            4: [4, 3, 4, 2, 3, 4, 5, 3, 4, 3],
            # Bloco 5 - Aprendizagem (quest√µes 41-50)
            5: [4, 5, 2, 4, 3, 4, 3, 4, 5, 3],
            # Bloco 6 - Intera√ß√£o Social (quest√µes 51-60)
            6: [3, 2, 4, 3, 2, 3, 4, 3, 2, 4],
            # Bloco 7 - Criatividade (quest√µes 61-67)
            7: [5, 4, 5, 4, 3, 5, 4]
        }
        
        questao_id = 1
        for bloco, respostas in respostas_simuladas.items():
            for resposta_valor in respostas:
                questionario = QuestionarioNeuroLearn(
                    aluno_id=aluno_id,
                    bloco=bloco,
                    questao=questao_id,
                    resposta=resposta_valor
                )
                db.session.add(questionario)
                questao_id += 1
        
        # Marcar como completo
        aluno.questionario_completo = True
        db.session.commit()
        
        total_respostas = QuestionarioNeuroLearn.query.filter_by(aluno_id=aluno_id).count()
        print(f"üìù Question√°rio simulado - {total_respostas} respostas salvas")
        
        return True

def testar_geracao_perfil(aluno_id):
    """Testa a gera√ß√£o do perfil"""
    with app.app_context():
        aluno = Aluno.query.get(aluno_id)
        print(f"ü§ñ Iniciando gera√ß√£o do perfil para aluno {aluno_id}")
        
        try:
            gerar_perfil_aprendizagem(aluno_id)
            
            # Recarregar do banco
            aluno = Aluno.query.get(aluno_id)
            perfil = PerfilAprendizagem.query.filter_by(aluno_id=aluno_id).first()
            
            print(f"‚úÖ Perfil gerado com sucesso!")
            print(f"   - Question√°rio completo: {aluno.questionario_completo}")
            print(f"   - Perfil gerado: {aluno.perfil_gerado}")
            print(f"   - Perfil no banco: {'Sim' if perfil else 'N√£o'}")
            
            if perfil:
                print(f"   - Tipo de perfil: {perfil.tipo_perfil}")
                print(f"   - Data de gera√ß√£o: {perfil.data_geracao}")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao gerar perfil: {e}")
            return False

def testar_acesso_dashboard(aluno_id):
    """Testa se o aluno consegue acessar o dashboard"""
    with app.app_context():
        aluno = Aluno.query.get(aluno_id)
        
        print(f"üè† Testando acesso ao dashboard:")
        print(f"   - Question√°rio completo: {aluno.questionario_completo}")
        print(f"   - Perfil gerado: {aluno.perfil_gerado}")
        
        # Simular a l√≥gica do dashboard_aluno
        if not aluno.questionario_completo:
            print("‚ö†Ô∏è PROBLEMA: Aluno seria redirecionado para question√°rio")
            return False
        else:
            print("‚úÖ Aluno pode acessar o dashboard")
            return True

def main():
    """Fun√ß√£o principal para testar todo o fluxo"""
    print("üß† NEUROLEARN - TESTE DE DEBUG DO QUESTION√ÅRIO")
    print("=" * 50)
    
    # 1. Resetar aluno de teste
    print("\n1Ô∏è‚É£ Resetando aluno de teste...")
    aluno = resetar_aluno_teste()
    
    # 2. Testar estado inicial
    print("\n2Ô∏è‚É£ Testando acesso inicial (deve redirecionar para question√°rio)...")
    testar_acesso_dashboard(aluno.id)
    
    # 3. Simular question√°rio completo
    print("\n3Ô∏è‚É£ Simulando preenchimento do question√°rio...")
    simular_questionario_completo(aluno.id)
    
    # 4. Testar gera√ß√£o do perfil
    print("\n4Ô∏è‚É£ Testando gera√ß√£o do perfil...")
    sucesso_perfil = testar_geracao_perfil(aluno.id)
    
    # 5. Testar acesso final ao dashboard
    print("\n5Ô∏è‚É£ Testando acesso final ao dashboard...")
    sucesso_dashboard = testar_acesso_dashboard(aluno.id)
    
    print("\n" + "=" * 50)
    if sucesso_perfil and sucesso_dashboard:
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        print("   O fluxo do question√°rio est√° funcionando corretamente.")
        print(f"   Aluno de teste: debug@aluno.com (senha: 123456)")
    else:
        print("‚ùå PROBLEMA IDENTIFICADO!")
        print("   Verificar logs acima para detalhes do erro.")

if __name__ == '__main__':
    main()

