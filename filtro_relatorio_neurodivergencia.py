#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Filtro para melhorar a apresenta√ß√£o dos relat√≥rios JSON de neurodiverg√™ncia
Projetado para a equipe Control + Amizade
"""

import json
import re
from datetime import datetime
from typing import Dict, Any, List

class FiltroRelatorioNeurodivergencia:
    """Filtro para processar e melhorar relat√≥rios de neurodiverg√™ncia"""
    
    def __init__(self):
        self.tipos_perfil_map = {
            'neurotipico': 'üü¢ Neurot√≠pico',
            'tdah': 'üîµ TDAH - Transtorno do D√©ficit de Aten√ß√£o/Hiperatividade',
            'tea': 'üü° TEA - Transtorno do Espectro Autista',
            'superdotacao': 'üü£ Superdota√ß√£o/Altas Habilidades',
            'dislexia': 'üü† Dislexia',
            'misto': 'üîÑ Perfil Misto'
        }
    
    def processar_json_bruto(self, json_texto: str) -> Dict[str, Any]:
        """Processa JSON bruto da IA e limpa formata√ß√£o"""
        try:
            # Limpar markdown
            texto_limpo = json_texto.strip()
            if texto_limpo.startswith('```json'):
                texto_limpo = texto_limpo[7:]
            if texto_limpo.endswith('```'):
                texto_limpo = texto_limpo[:-3]
            texto_limpo = texto_limpo.strip()
            
            # Parsear JSON
            dados = json.loads(texto_limpo)
            return dados
            
        except json.JSONDecodeError as e:
            print(f"Erro ao processar JSON: {e}")
            return self._gerar_json_padrao()
    
    def _gerar_json_padrao(self) -> Dict[str, Any]:
        """Gera estrutura JSON padr√£o em caso de erro"""
        return {
            'perfil_geral': 'Perfil n√£o p√¥de ser gerado automaticamente. Requer an√°lise manual.',
            'potenciais_expressivos': 'A ser determinado atrav√©s de observa√ß√£o direta.',
            'potenciais_cognitivos': 'A ser avaliado com instrumentos espec√≠ficos.',
            'indicios_neurodivergencias': 'An√°lise inconclusiva. Recomenda-se avalia√ß√£o especializada.',
            'recomendacoes_professores': 'Aplicar estrat√©gias pedag√≥gicas diversificadas e observar resposta do aluno.',
            'reforco_motivacional': 'Utilizar refor√ßos positivos e reconhecer esfor√ßos individuais.',
            'tipo_perfil': 'indefinido'
        }
    
    def formatar_relatorio_detalhado(self, dados_json: Dict[str, Any], nome_aluno: str = "", serie: str = "") -> str:
        """Formata relat√≥rio detalhado e leg√≠vel"""
        
        # Cabe√ßalho
        relatorio = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        RELAT√ìRIO DE NEURODIVERG√äNCIA                        ‚ïë
‚ïë                          Sistema NeuroLearn v2.0                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä INFORMA√á√ïES GERAIS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ Aluno: {nome_aluno if nome_aluno else 'Nome n√£o informado'}
üìö S√©rie/Ano: {serie if serie else 'N√£o informado'}
üìÖ Data do Relat√≥rio: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
üè∑Ô∏è  Tipo de Perfil: {self._obter_tipo_perfil_formatado(dados_json.get('tipo_perfil', 'indefinido'))}

üéØ PERFIL GERAL
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{self._formatar_texto(dados_json.get('perfil_geral', 'N√£o dispon√≠vel'))}

‚ú® POTENCIAIS EXPRESSIVOS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{self._formatar_texto(dados_json.get('potenciais_expressivos', 'N√£o identificados'))}

üß† POTENCIAIS COGNITIVOS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{self._formatar_texto(dados_json.get('potenciais_cognitivos', 'N√£o identificados'))}

üîç IND√çCIOS DE NEURODIVERG√äNCIAS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{self._formatar_texto(dados_json.get('indicios_neurodivergencias', 'N√£o identificados'))}

üë®‚Äçüè´ RECOMENDA√á√ïES PARA PROFESSORES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{self._formatar_lista_estrategias(dados_json.get('recomendacoes_professores', 'Nenhuma recomenda√ß√£o espec√≠fica'))}

üí™ ESTRAT√âGIAS DE REFOR√áO MOTIVACIONAL
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{self._formatar_lista_estrategias(dados_json.get('reforco_motivacional', 'Estrat√©gias padr√£o de motiva√ß√£o'))}

‚ö†Ô∏è  OBSERVA√á√ïES IMPORTANTES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Este relat√≥rio √© baseado em an√°lise computacional e deve ser complementado
  por observa√ß√£o pedag√≥gica e, se necess√°rio, avalia√ß√£o especializada.
‚Ä¢ Os ind√≠cios de neurodiverg√™ncia requerem confirma√ß√£o profissional.
‚Ä¢ As estrat√©gias sugeridas devem ser adaptadas ao contexto escolar espec√≠fico.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Gerado pelo Sistema NeuroLearn - Equipe Control + Amizade
üìß Para d√∫vidas t√©cnicas, contate: suporte@neurolearn.com
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        return relatorio
    
    def _obter_tipo_perfil_formatado(self, tipo_perfil: str) -> str:
        """Obt√©m vers√£o formatada do tipo de perfil"""
        tipo_limpo = tipo_perfil.lower().strip()
        return self.tipos_perfil_map.get(tipo_limpo, f"üîÑ {tipo_perfil.title()}")
    
    def _formatar_texto(self, texto: str) -> str:
        """Formata texto com quebras de linha adequadas"""
        if not texto or texto.strip() == "":
            return "‚Ä¢ Informa√ß√£o n√£o dispon√≠vel"
        
        # Quebrar linhas longas
        linhas = texto.split('\n')
        texto_formatado = ""
        
        for linha in linhas:
            if len(linha) > 78:
                palavras = linha.split(' ')
                linha_atual = ""
                for palavra in palavras:
                    if len(linha_atual + palavra) > 78:
                        texto_formatado += linha_atual.strip() + "\n"
                        linha_atual = "  " + palavra + " "
                    else:
                        linha_atual += palavra + " "
                texto_formatado += linha_atual.strip() + "\n"
            else:
                texto_formatado += linha + "\n"
        
        return texto_formatado.strip()
    
    def _formatar_lista_estrategias(self, texto: str) -> str:
        """Formata texto como lista de estrat√©gias"""
        if not texto or texto.strip() == "":
            return "‚Ä¢ Nenhuma estrat√©gia espec√≠fica identificada"
        
        # Se j√° cont√©m bullets ou n√∫meros, manter formata√ß√£o
        if '‚Ä¢' in texto or re.search(r'\d+\.', texto):
            return self._formatar_texto(texto)
        
        # Se √© um texto corrido, tentar quebrar em estrat√©gias
        frases = re.split(r'[.;]', texto)
        estrategias = []
        
        for frase in frases:
            frase = frase.strip()
            if len(frase) > 10:  # Ignorar frases muito curtas
                estrategias.append(f"‚Ä¢ {frase.capitalize()}")
        
        if estrategias:
            return "\n".join(estrategias)
        else:
            return f"‚Ä¢ {texto}"
    
    def gerar_relatorio_resumido(self, dados_json: Dict[str, Any]) -> Dict[str, str]:
        """Gera vers√£o resumida do relat√≥rio para exibi√ß√£o r√°pida"""
        return {
            'tipo_perfil': self._obter_tipo_perfil_formatado(dados_json.get('tipo_perfil', 'indefinido')),
            'principais_potenciais': self._extrair_principais_pontos(dados_json.get('potenciais_cognitivos', '')),
            'indicios_principais': self._extrair_principais_pontos(dados_json.get('indicios_neurodivergencias', '')),
            'recomendacao_prioritaria': self._extrair_primeira_recomendacao(dados_json.get('recomendacoes_professores', ''))
        }
    
    def _extrair_principais_pontos(self, texto: str, max_chars: int = 150) -> str:
        """Extrai os principais pontos de um texto longo"""
        if not texto or len(texto) <= max_chars:
            return texto
        
        # Pegar primeira frase ou at√© o primeiro ponto
        primeira_parte = texto.split('.')[0] + '.'
        if len(primeira_parte) <= max_chars:
            return primeira_parte
        
        # Se ainda for muito longo, cortar e adicionar retic√™ncias
        return texto[:max_chars-3] + "..."
    
    def _extrair_primeira_recomendacao(self, texto: str) -> str:
        """Extrai a primeira recomenda√ß√£o do texto"""
        if not texto:
            return "Observar padr√µes de aprendizagem do aluno"
        
        # Se cont√©m bullets, pegar o primeiro
        if '‚Ä¢' in texto:
            partes = texto.split('‚Ä¢')
            if len(partes) > 1:
                return partes[1].split('\n')[0].strip()
        
        # Se cont√©m n√∫meros, pegar o primeiro
        if re.search(r'1\.', texto):
            partes = re.split(r'\d+\.', texto)
            if len(partes) > 1:
                return partes[1].split('\n')[0].strip()
        
        # Caso contr√°rio, pegar primeira frase
        primeira_frase = texto.split('.')[0] + '.'
        return primeira_frase if len(primeira_frase) < 100 else primeira_frase[:97] + "..."
    
    def salvar_relatorio_arquivo(self, relatorio_texto: str, nome_arquivo: str = None) -> str:
        """Salva relat√≥rio em arquivo de texto"""
        if not nome_arquivo:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            nome_arquivo = f"relatorio_neurodivergencia_{timestamp}.txt"
        
        try:
            with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:
                arquivo.write(relatorio_texto)
            return nome_arquivo
        except Exception as e:
            print(f"Erro ao salvar arquivo: {e}")
            return ""

# Fun√ß√£o de conveni√™ncia para uso direto
def filtrar_relatorio_json(json_texto: str, nome_aluno: str = "", serie: str = "") -> str:
    """Fun√ß√£o de conveni√™ncia para filtrar relat√≥rio JSON"""
    filtro = FiltroRelatorioNeurodivergencia()
    dados = filtro.processar_json_bruto(json_texto)
    return filtro.formatar_relatorio_detalhado(dados, nome_aluno, serie)

# Exemplo de uso
if __name__ == "__main__":
    # Exemplo de JSON da IA
    exemplo_json = '''
    {
        "perfil_geral": "O aluno apresenta caracter√≠sticas compat√≠veis com alta criatividade e foco seletivo intenso, com algumas dificuldades atencionais em tarefas menos estimulantes.",
        "potenciais_expressivos": "Destaque em atividades criativas, capacidade de pensamento divergente, express√£o art√≠stica desenvolvida.",
        "potenciais_cognitivos": "Racioc√≠nio l√≥gico-matem√°tico acima da m√©dia, excelente mem√≥ria para assuntos de interesse, capacidade de s√≠ntese.",
        "indicios_neurodivergencias": "Poss√≠vel TDAH do tipo combinado: dificuldades atencionais, hiperatividade mental, mas com hiperfoco em √°reas de interesse. Recomenda-se avalia√ß√£o especializada.",
        "recomendacoes_professores": "Utilizar metodologias ativas. Permitir movimento controlado. Fragmentar tarefas longas. Usar est√≠mulos visuais. Valorizar criatividade.",
        "reforco_motivacional": "Reconhecer conquistas individuais. Permitir escolhas. Conectar conte√∫do com interesses. Oferecer desafios graduais.",
        "tipo_perfil": "tdah"
    }
    '''
    
    print("Testando filtro de relat√≥rio...")
    relatorio_formatado = filtrar_relatorio_json(exemplo_json, "Jo√£o Silva", "7¬∫ Ano")
    print(relatorio_formatado)

